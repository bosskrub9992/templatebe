// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/bosskrub9992/templatebe/corelib/database"
	"github.com/bosskrub9992/templatebe/corelib/loggers"
	"github.com/bosskrub9992/templatebe/corelib/server"
	"github.com/bosskrub9992/templatebe/service/bff/src/api/v1"
	"github.com/bosskrub9992/templatebe/service/bff/src/config"
	"github.com/bosskrub9992/templatebe/service/bff/src/controller"
	"github.com/bosskrub9992/templatebe/service/bff/src/repository/sqlcrepository"
	"github.com/bosskrub9992/templatebe/service/bff/src/repository/sqlcrepository/sqlc"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitializeRestServer() (*server.RESTServer, func(), error) {
	configServer := config.NewServerConfig()
	zerologConfig := config.NewLoggerConfig()
	logger := loggers.NewZerolog(zerologConfig)
	postgresConfig := config.NewDBConfig()
	db, err := database.NewPostgres(postgresConfig)
	if err != nil {
		return nil, nil, err
	}
	queries := sqlc.New(db)
	sqlcCustomerRepository := sqlcrepository.NewSQLCCustomerRepository(queries)
	customerController := controller.NewCustomerController(logger, sqlcCustomerRepository)
	healthController := controller.NewHealthController()
	handler := v1.NewHandler(customerController, healthController)
	restServer := server.NewRESTServer(configServer, handler, logger)
	return restServer, func() {
	}, nil
}

// wire.go:

var controllerSet = wire.NewSet(controller.NewCustomerController, controller.NewHealthController)

var repositorySet = wire.NewSet(sqlcrepository.NewSQLCCustomerRepository)
